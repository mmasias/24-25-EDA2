@startuml

class Pixel {
    - x: int
    - y: int
    - colorActual: Color
    + actualizarColor(color: Color): void
    + obtenerCoordenadas(): (int, int)
    + obtenerColor(): Color
}

class Frame {
    - pixeles: Pixel[][]
    - ancho: int
    - alto: int
    + actualizarPixel(x: int, y: int, color: Color): void
    + reiniciarPixeles(): void
    + obtenerDimensiones(): (int, int)
    + obtenerPixel(x: int, y: int): Pixel
}

class DoubleBuffer {
    - frameActivo: Frame
    - frameEnEspera: Frame
    + alternarFrames(): void
    + obtenerFrameActivo(): Frame
    + obtenerFrameEspera(): Frame
    + renderizarFrame(): void
}

class TemporalColorBlender {
    - tablaCombinacionColores: Map<Color, Color> // Mapa de combinaciones de colores
    - tasaAlternancia: float
    + calcularColorResultado(color1: Color, color2: Color): Color
    + establecerPatrones(patrones: List<Color>): void
    + obtenerPatrones(): List<Color>
}

Pixel -> Frame : contiene
Frame -> DoubleBuffer : gestiona
DoubleBuffer -> TemporalColorBlender : utiliza

@enduml

